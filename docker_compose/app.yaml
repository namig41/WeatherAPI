version: '3.9'
services:
  auth_service_app:
    container_name: auth_service_app
    build:
      context: ..
      dockerfile: Dockerfile
    command: "uvicorn --factory presentation.api.auth_service.v1.main:create_app --reload --host 0.0.0.0 --port 8000"
    ports:
      - '${AUTH_SERVICE_API_PORT}:8000'
    volumes:
      - ../app/:/app
    env_file:
      - ../.env
    networks:
      - backend
  weather_service_app:
    container_name: weather_service_app
    build:
      context: ..
      dockerfile: Dockerfile
    command: "uvicorn --factory presentation.api.weather_service.v1.main:create_app --reload --host 0.0.0.0 --port 8000"
    ports:
      - '${WEATHER_SERVICE_API_PORT}:8000'
    volumes:
      - ../app/:/app
    env_file:
      - ../.env
    networks:
      - backend
  static_service_app:
    container_name: static_service_app
    build:
      context: ..
      dockerfile: Dockerfile
    command: "uvicorn --factory presentation.api.static_service.v1.main:create_app --reload --host 0.0.0.0 --port 8000"
    ports:
      - '${STATIC_SERVICE_API_PORT}:8000'
    volumes:
      - ../app/:/app
    env_file:
      - ../.env
    networks:
      - backend
  celery-worker:
    container_name: celery-worker
    build:
      context: ..
      dockerfile: Dockerfile
    command: >
      celery -A infrastructure.task_queue.init worker --loglevel=info
    volumes:
      - ../app/:/app
    env_file:
      - ../.env
    networks:
      - backend
  # migration_service:
  #   container_name: migration_service
  #   build:
  #     context: ..
  #     dockerfile: Dockerfile
  #   command: >
  #     alembic upgrade head
  #   volumes:
  #     - ../app/:/app
  #     - ../migrations/:/app/migrations
  #   env_file:
  #     - ../.env
  #   networks:
  #     - backend
  tests:
    container_name: test_app
    build:
      context: ..
      dockerfile: Dockerfile
    command: ["sleep", "infinity"]
    volumes:
      - ../app/:/app
      - ../tests/:/app/tests
    env_file:
      - ../.env
    environment:
      - POSTGRES_DB=${POSTGRES_TEST_DB}
    networks:
      - backend
  # admin_service_app:
  #   container_name: admin_service_app
  #   build:
  #     context: ..
  #     dockerfile: Dockerfile
  #   command: "uvicorn --factory presentation.admin.main:create_app  --reload --host 0.0.0.0 --port 8000"
  #   ports:
  #     - '${ADMIN_SERVICE_PORT}:8000'
  #   volumes:
  #     - ../app/:/app
  #   env_file:
  #     - ../.env
  #   networks:
  #     - backend
  # bot_service_app:
  #   container_name: bot_service_app
  #   build:
  #     context: ..
  #     dockerfile: Dockerfile
  #   command: "python presentation/bot/main.py"
  #   volumes:
  #     - ../app/:/app
  #   env_file:
  #     - ../.env
  #   networks:
  #     - backend


networks:
  backend:
    driver: bridge
